<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Aritra Biswas</title>
    <link>https://academic-demo.netlify.app/post/</link>
      <atom:link href="https://academic-demo.netlify.app/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Sat, 18 Dec 2021 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://academic-demo.netlify.app/media/icon_hu52c76baf5d1231d4145a3e91a90778a9_25217_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://academic-demo.netlify.app/post/</link>
    </image>
    
    <item>
      <title>Avoid relative path import hell in python</title>
      <link>https://academic-demo.netlify.app/post/avoid-relative-path-import-hell-in-python/</link>
      <pubDate>Sat, 18 Dec 2021 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/avoid-relative-path-import-hell-in-python/</guid>
      <description>&lt;h1 id=&#34;exploring-poetry-for-depedendency-management-in-python&#34;&gt;Exploring &lt;code&gt;poetry&lt;/code&gt; for depedendency management in python&lt;/h1&gt;
&lt;h2 id=&#34;useful-commands&#34;&gt;Useful commands&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;# Download poetry in Ubuntu
curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
source $HOME/.poetry/env # Add to PATH
poetry --version # Check version of poetry
poetry self update # Update version
poetry new project1 # Create a new project
cd project1
tree . 
poetry run pytest # Run pytest for the project
poetry add pandas # Add a package as dependency of a project
poetry remove pandas # Delete a project from the file
poetry add --dev pytest # Add a package as dev dependency in a poetry project
poetry add -D coverage[toml] pytest-cov # --dev &amp;amp; -D same
poetry install # Install all the dependencies for a project
poetry build # Build a python library using poetry
poetry publish # Publish library to PyPI
poetry export - requirements.txt --output requirements.txt # Generate requirements.txt
poetry use python3.8 # Use specific version of python in the project
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;some-important-information&#34;&gt;Some important information&lt;/h2&gt;
&lt;h3 id=&#34;important-files&#34;&gt;Important files&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pyproject.toml&lt;/code&gt; is the single file for all project related metadata.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;poetry.lock&lt;/code&gt; file is the granular metadata.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pypirc&lt;/code&gt; will not work with poetry.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;config.toml&lt;/code&gt; &amp;amp; &lt;code&gt;auth.toml&lt;/code&gt; is used for setting up the artifact repository.&lt;/li&gt;
&lt;li&gt;export &lt;code&gt;POETRY_PYPI_TOKEN_PYPI&lt;/code&gt;, export &lt;code&gt;POETRY_HTTP_BAISC_PYPI_USERNAME&lt;/code&gt; and export &lt;code&gt;POETRY_HTTP_BAISC_PYPI_PASSWORD&lt;/code&gt; can be used for this.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;publishing-library-as-artifact-to-artifact-store&#34;&gt;Publishing library as artifact to artifact store&lt;/h3&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# config.toml : ~/.config/pypoetry/config.toml
[repositories]
pypi = {url = &amp;quot;https://upload.pypi.org/legacy/&amp;quot;}
testpypi = {url = &amp;quot;https://test.pypi.org/legacy/&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;# auth.toml: ~/.config/pypoetry/auth.toml
[http-basic]
pypi = {username = &amp;quot;myuser&amp;quot;, password = &amp;quot;topsecret&amp;quot;}
testpypi = {username = &amp;quot;myuser&amp;quot;, password = &amp;quot;topsecret&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Check GitHub issue related to this &lt;a href=&#34;https://github.com/python-poetry/poetry/issues/111&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# Run dotnet build and package
- name: dotnet build and publish
run: |
    dotnet restore
    dotnet build --configuration &#39;${{ env.BUILD_CONFIGURATION }}&#39;
    dotnet pack -c &#39;${{ env.BUILD_CONFIGURATION }}&#39; --version-suffix $GITHUB_RUN_ID

# Publish the package to Azure Artifacts
- name: &#39;dotnet publish&#39;
run: dotnet nuget push --api-key AzureArtifacts bin/Release/*.nupkg
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=G-OAVLBFxbw&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;PyBites Python Poetry Training&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>SCM conventions &amp; ways of working</title>
      <link>https://academic-demo.netlify.app/post/scm-conventions-ways-of-working/</link>
      <pubDate>Sun, 31 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/scm-conventions-ways-of-working/</guid>
      <description>&lt;p&gt;When we are working in an collaborative work environment, this is important to share a common set of convention which makes collaboration easier. Here are some of the common gitops best practice which has helped to collaborate better,&lt;/p&gt;
&lt;h2 id=&#34;__repository-naming-convention__&#34;&gt;&lt;strong&gt;Repository naming convention&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;{short product name}_{component}_{type of repository}&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;__short-product-name__&#34;&gt;&lt;strong&gt;Short product name:&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;modeller:&lt;/strong&gt; modelling engine&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;optimizer:&lt;/strong&gt; optimization engine&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;__component__&#34;&gt;&lt;strong&gt;Component:&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;ui:&lt;/strong&gt; any code related to the user interface&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ml:&lt;/strong&gt; anything to do with machine learning code base&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;de:&lt;/strong&gt; anything to do with data engineering code base&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;be:&lt;/strong&gt; anything to do with REST API endpoints for ml, de or in general application.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;__type-of-repository__&#34;&gt;&lt;strong&gt;Type of repository:&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;app:&lt;/strong&gt; mostly used for ui and cli standalone application.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;lib:&lt;/strong&gt; library code base of ml and de engines.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;job:&lt;/strong&gt; cli or script based jobs which will be executed in a batch process.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;api:&lt;/strong&gt; code base related to apis.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;__example__&#34;&gt;&lt;strong&gt;Example:&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;modeller_ml_lib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;modeller_de_lib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;modeller_ml_job&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;modeller_be_api&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;modeller_ui_app&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;__branch-naming-convention__&#34;&gt;&lt;strong&gt;Branch naming convention:&lt;/strong&gt;&lt;/h2&gt;
&lt;h3 id=&#34;__code-flow-branches-restricted-commit-branch__&#34;&gt;&lt;strong&gt;Code Flow Branches (restricted commit branch):&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;develop:&lt;/strong&gt; developers can merge their branches here.
&lt;strong&gt;staging:&lt;/strong&gt; any final tagging or testing has to happen here.
&lt;strong&gt;master:&lt;/strong&gt; production branch, if all the validation is working in staging and tested code needs to be merged here.
&lt;strong&gt;test:&lt;/strong&gt; other than unit testing regression, integration and end to end testing has to happen here.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Flow of code:&lt;/strong&gt; &lt;code&gt;develop &amp;gt; test &amp;gt; staging &amp;gt; production&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&#34;__temporary-branches__&#34;&gt;&lt;strong&gt;Temporary Branches:&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;feature:&lt;/strong&gt; anything which is a feature has to be developed in a feature branch and the branch name should be like : &lt;code&gt;feature/{name of the feature}&lt;/code&gt; [example: &lt;code&gt;feature/integrate-swagger&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;bug fix:&lt;/strong&gt; any bug fix has to be done in a bud fix branch. the structure remains as feature branch. structure of the branch name will be like &lt;code&gt;bugfix/{bug which is being fixed}&lt;/code&gt; [example: &lt;code&gt;bugfix/more-gray-shades-in-loader&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;hot fix:&lt;/strong&gt; any hotfix from master has to be made in this branch. also, note that these fixes has to be merged in other common branches that the master branch. [example: &lt;code&gt;hotfix/disable-endpoint-zero-day-exploit&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;experimental:&lt;/strong&gt; any experimental work has to be tagged this way while creating a branch. [example: &lt;code&gt;experimental/dark-theme-support&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;build:&lt;/strong&gt; any build branch should start with the build pre-fix. [example: &lt;code&gt;build/jacoco-metric&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;release:&lt;/strong&gt; any release branch has to be tagged by a release prefix. [example: &lt;code&gt;release/myapp-1.01.123&lt;/code&gt;]&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;merging:&lt;/strong&gt; any intermediate merge branch has to be tagged with merge prefix. [example: &lt;code&gt;merge/dev_lombok-refactoring&lt;/code&gt;]&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;__commit-convention__&#34;&gt;&lt;strong&gt;Commit convention:&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;We are adding some keyword to the commit messages based on which a semantic versioning tag can be generated. A version tag will look like, &lt;code&gt;v{MAJOR}.{MINOR}.{PATCH}&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Here, this is how commit tags are getting translated to semantic versioning numbers, &lt;code&gt;fix --&amp;gt; patch&lt;/code&gt;, &lt;code&gt;feat --&amp;gt; minor&lt;/code&gt; and &lt;code&gt;BREAKING CHANGE --&amp;gt; major&lt;/code&gt;.&lt;/p&gt;
&lt;h3 id=&#34;__area-of-work__&#34;&gt;&lt;strong&gt;Area of work:&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;fix:&lt;/strong&gt; if there is a small change which does not break any of the high level APIs and does not change overall behaviors of a feature that will be consider as fix. this corresponds to the &lt;code&gt;patch&lt;/code&gt; in the semantic versioning.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;feat:&lt;/strong&gt; if there is a feature level change then the commit should have feat tagged along with in. in terms of the semantic versioning this corresponds to the minor version change.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;BREAKING CHANGE:&lt;/strong&gt; this is a change where multiple modules and high level APIs are getting changed.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;build:&lt;/strong&gt; These are not linked with semver. any build level changes has to be tagged as build. for example, if we are changing some configuration in &lt;code&gt;setup.py&lt;/code&gt; that should be tagged as build commit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;chore:&lt;/strong&gt; updating grunt tasks etc; no production code change&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;ci:&lt;/strong&gt; change in any of the github workflow or azure pipeline level changes has to be tagged as ci commit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;docs:&lt;/strong&gt; any changes in wiki documentation or library docstring level changes has to be tagged as &lt;code&gt;docs&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;style:&lt;/strong&gt; if there is any changes in code due to formatting or linting those can be tagged as style change.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;refactor:&lt;/strong&gt; if some code is being refactored that has to be tagged as refactored commit.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;perf:&lt;/strong&gt; for profiling a code base use pref tag.&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;test:&lt;/strong&gt; for any commit related to tests can be tagged as &lt;code&gt;test&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;__commit-structure__&#34;&gt;&lt;strong&gt;Commit structure:&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;{area_of_work}: {ticket_id} {One line description of commit}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[optional] Detailed description of the commit&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;__in-general-things-related-to-scm__&#34;&gt;&lt;strong&gt;In general things related to SCM:&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Do not push large files in git.&lt;/li&gt;
&lt;li&gt;Do not pass secrets in git.&lt;/li&gt;
&lt;li&gt;Do not directly commit in no commit branches.&lt;/li&gt;
&lt;li&gt;Generate .gitignore file from &lt;code&gt;gitignore.io&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;__reference__&#34;&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.linkapi.solutions/blog/conventional-commits-pattern&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Conventional Commits Pattern&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.aritro.in/post/manage-python-library-versioning-using-commitizen-pre-commit-hook/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Python library version management with GitHub action + commitizen + pre-commit hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0-beta.2/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Conventional commits&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Useful tools for docker container management</title>
      <link>https://academic-demo.netlify.app/post/useful-tools-for-docker-container-management/</link>
      <pubDate>Sun, 31 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/useful-tools-for-docker-container-management/</guid>
      <description>&lt;p&gt;In this post I&amp;rsquo;m going to discuss three docker tools which I find really useful in my day to day workflow. These tools are,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wagoodman/dive&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Dive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://portainer.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Portainer&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://dozzle.dev/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;dozzle&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;dive-quick-check-of-docker-images&#34;&gt;Dive: quick check of docker images&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./dive.gif&#34; alt=&#34;Dive&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Dive is super useful to check if there any unnecessary data stored in a docker image. In Ubuntu to install dive run the following commands,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;wget https://github.com/wagoodman/dive/releases/download/v0.9.2/dive_0.9.2_linux_amd64.deb
sudo apt install ./dive_0.9.2_linux_amd64.deb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note, replace this &lt;code&gt;0.9.2&lt;/code&gt; version to the latest one. Once this tool is installed in your system you can use,&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dive &amp;lt;your-image-tag&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;or&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dive build -t &amp;lt;some-tag&amp;gt; .
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;You can use dive as GitHub action in your workflow. Checkout &lt;a href=&#34;https://github.com/marketplace/actions/dive-action&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;this&lt;/a&gt; action which helps integrating dive in your workflow using github action.&lt;/p&gt;
&lt;h2 id=&#34;dozzle-a-light-weight-centralized-log-monitoring-tool-for-containers&#34;&gt;Dozzle: a light-weight centralized log monitoring tool for containers&lt;/h2&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./dozzle.gif&#34; alt=&#34;Dozzle&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;This an useful tool which can be used for monitoring all the running containers live logs. This can be used with normal docker-compose or docker swarm.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;dozzle:
  container_name: dozzle
  image: amir20/dozzle:latest
  volumes:
    - /var/run/docker.sock:/var/run/docker.sock
  ports:
    - &amp;quot;8001:8080&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;If you add the above section in any of the existing docker-compose file this will work out of the box and will show all the running logs of the same docker compose file in &lt;code&gt;localhost:8001&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;portainer-gui-to-monitor-all-running-container&#34;&gt;Portainer: GUI to monitor all running container&lt;/h2&gt;
&lt;p&gt;This tool is good to see all the all docker containers in the system and meta data related to the docker containers.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./portainer.png&#34; alt=&#34;Portainer&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;p&gt;Portainer 2.0 out of the box works with,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;docker&lt;/li&gt;
&lt;li&gt;docker-compose&lt;/li&gt;
&lt;li&gt;docker-swarm&lt;/li&gt;
&lt;li&gt;kubernetes&lt;/li&gt;
&lt;li&gt;azure container registry&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;reference&#34;&gt;Reference:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.youtube.com/watch?v=QBNaOdNSsx8&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://www.youtube.com/watch?v=QBNaOdNSsx8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/amir20/dozzle&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/amir20/dozzle&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://docs.portainer.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://docs.portainer.io/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Python library version management with GitHub action &#43; commitizen &#43; pre-commit hook</title>
      <link>https://academic-demo.netlify.app/post/manage-python-library-versioning-using-commitizen-pre-commit-hook/</link>
      <pubDate>Sun, 24 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/manage-python-library-versioning-using-commitizen-pre-commit-hook/</guid>
      <description>&lt;h2 id=&#34;__list-of-tools-used-in-this-post__&#34;&gt;&lt;strong&gt;List of tools used in this post&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://commitizen-tools.github.io/commitizen/#:~:text=Commitizen%20is%20a%20tool%20designed,and%20enforces%20writing%20descriptive%20commits.&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;commitizen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;conventionalcommits&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Git Hooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://pre-commit.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Pre-commit hook&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/features/actions&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;GitHub Action&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://semver.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Semantic Versioning&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here is a &lt;a href=&#34;https://github.com/pandalearnstocode/minimal_library_workflow&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;sample repository&lt;/a&gt; which show the implementation below.&lt;/p&gt;
&lt;h2 id=&#34;__context--overview__&#34;&gt;&lt;strong&gt;Context &amp;amp; overview&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Lets assume that we are going to build a python library. Lets call it &lt;code&gt;minipackage&lt;/code&gt;. We need to manage the version of the library &amp;amp; need to generate the &lt;code&gt;CHANGELOGS.md&lt;/code&gt; whenever we release a version of the library. There are multiple ways to solve this problem. Here in the post we are going see how we can use semantic versioning to solve this problem.&lt;/p&gt;
&lt;h2 id=&#34;__project-directory-structure__&#34;&gt;&lt;strong&gt;Project directory structure&lt;/strong&gt;&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;minipackage&lt;/code&gt;: All the source code for the python library will live here.
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;__init.py__&lt;/code&gt;: Library version, other meta data will be here. Also, we need to register any external methods we want to expose as API in the library.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;main.py&lt;/code&gt;: main module is kind of representation of any module and sub-module which will be part of the python library.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pyproject.toml&lt;/code&gt;: This file will have all the meta-data related to the tools which we will be using this project. In the example, &lt;code&gt;tool.commitizen&lt;/code&gt; example is present but there can be many more settings registered in this file related to the other tools being used in the project.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;README.md&lt;/code&gt;: self explanatory.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;requirements.txt&lt;/code&gt;: All the python dependencies required for the library.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;.pre-commit-config.yaml&lt;/code&gt;: git pre-commit hooks. Here in this example we have just shown the &lt;code&gt;commitizen&lt;/code&gt; pre-commit hook example. But there can be many other as well.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;setup.py&lt;/code&gt;: all the library building related information will be here.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;If you want to refresh some basics of python library building process checkout this &lt;a href=&#34;https://www.youtube.com/watch?v=P3dY3uDmnkU&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;link&lt;/a&gt;. Regarding &lt;a href=&#34;https://www.youtube.com/watch?v=Wmw-VGSjSNg&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;pre-commit&lt;/a&gt; checkout this link.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;.
├── minipackage
│   ├── __init__.py
│   ├── main.py
├── pyproject.toml
├── README.md
├── requirements.txt
├── .pre-commit-config.yaml
└── setup.py
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;__pyprojecttoml-project-tools-and-metadata-related-to-tools-used-in-project__&#34;&gt;&lt;strong&gt;&lt;code&gt;pyproject.toml&lt;/code&gt;: project tools and metadata related to tools used in project&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;version&lt;/code&gt; and &lt;code&gt;version_files&lt;/code&gt; these are the two import field which has a major impact in this workflow. make sure that &lt;code&gt;version_files&lt;/code&gt; field points to the file which is the single source of version. We also need to ensure that we will be using the same file and variable all across the project. While start a project &lt;code&gt;__version__&lt;/code&gt; in &lt;code&gt;__init__.py&lt;/code&gt; and &lt;code&gt;version&lt;/code&gt; variable in &lt;code&gt;pyproject.toml&lt;/code&gt; file should match.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-toml&#34;&gt;[tool.commitizen]
name = &amp;quot;cz_conventional_commits&amp;quot;
version = &amp;quot;0.0.1&amp;quot;
version_files = [
    &amp;quot;minipackage/__init__.py&amp;quot;,
    &amp;quot;pyproject.toml:version&amp;quot;
]
tag_format = &amp;quot;v$version&amp;quot;
bump_message = &amp;quot;bump: $current_version → $new_version [skip-ci]&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Note, here in our example here we using the variable &lt;code&gt;__version__&lt;/code&gt; in all place in the project to manage the version and the same file is mentioned in the pyproject file. Now, when we using &lt;code&gt;commitizen&lt;/code&gt; to bump version of the library it will change value of this variable depending on the commit message tags. Also, this will generate a &lt;code&gt;changelog.md&lt;/code&gt; file in the project root directory and create a release tag.&lt;/p&gt;
&lt;h3 id=&#34;__setuppy-library-build-related-information__&#34;&gt;&lt;strong&gt;&lt;code&gt;setup.py&lt;/code&gt;: library build related information&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;In this section, notice that we using &lt;code&gt;__version__&lt;/code&gt; variable from &lt;code&gt;minipackage&lt;/code&gt; module here. We are passing this &lt;code&gt;__version__&lt;/code&gt; variable to in &lt;code&gt;version&lt;/code&gt; argument in setup function. This will ensure whenever we are building a library, the library gets tagged with this version.&lt;/p&gt;
&lt;p&gt;Note, that whatever is being defined or imported in &lt;code&gt;minipackage/__init__py&lt;/code&gt; file will be present in in &lt;code&gt;minipackage&lt;/code&gt; module.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from setuptools import find_packages, setup
from minipackage import __version__

setup(
    author=&amp;quot;Aritra Biswas&amp;quot;,
    author_email=&amp;quot;pandalearnstocode@gmail.com&amp;quot;,
    python_requires=&amp;quot;&amp;gt;=3.8&amp;quot;,
    install_requires=requirements,
    include_package_data=True,
    keywords=&amp;quot;minipackage&amp;quot;,
    name=&amp;quot;minipackage&amp;quot;,
    packages=find_packages(include=[&amp;quot;minipackage&amp;quot;, &amp;quot;minipackage.*&amp;quot;]),
    version=__version__,
)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;__source__init__py-main-place-where-the-version-variable-is-being-used__&#34;&gt;&lt;strong&gt;&lt;code&gt;source/__init__.py&lt;/code&gt;: main place where the version variable is being used&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This will be the initial state of the init file. Later when we bump library version in the CI pipeline, this &lt;code&gt;__version__&lt;/code&gt; variable will change depending upon commit message tags.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;__version__ = &amp;quot;0.0.1&amp;quot;
from minipackage.main import hello_world, hello_mcu, hello_dc, 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./cc.png&#34; alt=&#34;Example CZ commits&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;__pre-commit-configyaml--ensuring-commit-message-format-is-being-followed__&#34;&gt;&lt;strong&gt;&lt;code&gt;.pre-commit-config.yaml&lt;/code&gt; : ensuring commit message format is being followed&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;This is not a mandatory thing but kind of a fail safe mechanism to implement conventional commit messages in our day to day workflow.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;repos:
- repo: https://github.com/commitizen-tools/commitizen
  rev: v2.19.0
  hooks:
    - id: commitizen
      stages: [commit-msg]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;One this pre-commit hook is install to a repository, whenever we are going to make commit this will check the commit tags are present in the commit message or not. To know more about this in depth go through this &lt;a href=&#34;https://www.conventionalcommits.org/en/v1.0.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;site&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./featured.png&#34; alt=&#34;SemVer&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;h3 id=&#34;__githubworkflowsbumpversionyaml--github-action-to-update-the-version-value-in-the-respective-file__&#34;&gt;&lt;strong&gt;&lt;code&gt;.github/workflows/bumpversion.yaml&lt;/code&gt; : GitHub action to update the version value in the respective file&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;For a commit message like &lt;code&gt;bump: update library version.&lt;/code&gt; to the configured branch, this will update the library version, generate changelog and push it to the feature branch. Post that when we trigger a build, a library with the same version tag will be generated and sent to the python library repository.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-yaml&#34;&gt;name: NEW Bump version
on:
  push:
    branches:
      - develop
jobs:
  bump_version:
    if: &amp;quot;!startsWith(github.event.head_commit.message, &#39;bump:&#39;)&amp;quot;
    runs-on: ubuntu-latest
    name: &amp;quot;Bump version and create changelog with commitizen&amp;quot;
    steps:
      - name: Check out
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
          token: &amp;quot;${{ secrets.GITHUB_TOKEN }}&amp;quot;
      - id: cz
        name: Create bump and changelog
        uses: commitizen-tools/commitizen-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: develop
      - name: Print Version
        run: echo &amp;quot;Bumped to version ${{ steps.cz.outputs.version }}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt; This workflow may change depending upon how you want to update the library version. Here action is driven by push to develop branch but it is possible to setup this process with pull request trigger or any other trigger as well.&lt;/p&gt;
&lt;h3 id=&#34;__reference__&#34;&gt;&lt;strong&gt;Reference:&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.linkapi.solutions/blog/conventional-commits-pattern&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Conventional Commits Pattern&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Local development environment with Fast API &#43; SQLModel &#43; SQLite &#43; Alembic</title>
      <link>https://academic-demo.netlify.app/post/local-development-environment-with-fast-api-sqlmodel-sqlite-alembic-sync-async-version/</link>
      <pubDate>Sat, 16 Oct 2021 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/local-development-environment-with-fast-api-sqlmodel-sqlite-alembic-sync-async-version/</guid>
      <description>&lt;p&gt;This is important to have a working local development environment for quick prototyping and developing CRUD application using Fast API. Here in this post we are going to explore how we can quickly spin up and a local development environment. Here we are going to use the following tools to develop the REST API endpoints,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fastapi.tiangolo.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fast API&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sqlmodel.tiangolo.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SQLModel&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.sqlite.org/index.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alembic.sqlalchemy.org/en/latest/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Alembic&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;prerequisite&#34;&gt;Prerequisite:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://www.anaconda.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Anaconda&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://sqlitebrowser.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DB browser for SQLite&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;curl&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;code-repository&#34;&gt;Code repository:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pandalearnstocode/fastapi_sqlmodel_sqlite_alembic_sync_template&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fast API + SQLite + SQLModel + Alembic (Sync version)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/pandalearnstocode/fastapi_sqlmodel_sqlite_alembic_async_template&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Fast API + SQLite + SQLModel + Alembic (Async version)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;sample-api-workflow&#34;&gt;Sample API workflow:&lt;/h3&gt;
&lt;h4 id=&#34;workflow&#34;&gt;Workflow:&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;Write database models&lt;/li&gt;
&lt;li&gt;Write database settings&lt;/li&gt;
&lt;li&gt;Write REST API endpoints&lt;/li&gt;
&lt;li&gt;Test APIs&lt;/li&gt;
&lt;li&gt;Setup alembic&lt;/li&gt;
&lt;li&gt;Change database models&lt;/li&gt;
&lt;li&gt;Update APIs&lt;/li&gt;
&lt;li&gt;Run alembic migration&lt;/li&gt;
&lt;li&gt;Test APIs&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;project-structure&#34;&gt;Project structure:&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;.
├── app
│   ├── db.py : All the settings related to DB will be here.
│   ├── __init__.py
│   ├── main.py : All endpoints will be defined here.
│   └── models.py : All the data models will be defined here.
└── database.db : This SQLite DB will be created and data will be stored here.
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-1-setup-development-environment&#34;&gt;Step 1: Setup development environment&lt;/h3&gt;
&lt;p&gt;Create a local development conda environment to run the application from local. Here we are going to use python 3.8. After creating the environment install the required dependencies.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;conda create --name fastapi_sqlmodel python=3.8
conda activate fastapi_sqlmodel
pip install fastapi[all] sqlmodel alembic aiosqlite
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-2-create-database-models-in-modelspy&#34;&gt;Step 2: Create database models in &lt;code&gt;models.py&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Here we are going to define a database model to store information related to &lt;code&gt;task name&lt;/code&gt;. Task table is the table which will be updated later with the &lt;code&gt;task description&lt;/code&gt; information and we will perform a migration to see how the changes are going to be maintained and reflected in the database.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sqlmodel import SQLModel, Field

class TaskBase(SQLModel):
    task_name: str

class Task(TaskBase, table=True):
    id: int = Field(default=None, primary_key=True)

class TaskCreate(TaskBase):
    pass
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-3-create-settings-related-to-db-in-dbpy&#34;&gt;Step 3: Create settings related to DB in &lt;code&gt;db.py&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Here for rapid prototype we are going to use sqlite local db. Which is kind of a standalone file. To view the record in the file we can we use the &lt;a href=&#34;https://sqlitebrowser.org/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;DB browser for SQLite&lt;/a&gt;. After we run the application a a file called &lt;code&gt;database.db&lt;/code&gt; will be created in the root directory of the project.&lt;/p&gt;
&lt;h4 id=&#34;sync-version&#34;&gt;Sync version:&lt;/h4&gt;
&lt;p&gt;Here are going to create two functions which will create all the required tables when the FastAPI application starts and will generate a session using which I/O operations will be performed in a DB.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sqlmodel import Session, SQLModel, create_engine
sqlite_file_name = &amp;quot;database.db&amp;quot;
sqlite_url = f&amp;quot;sqlite:///{sqlite_file_name}&amp;quot;

connect_args = {&amp;quot;check_same_thread&amp;quot;: False}
engine = create_engine(sqlite_url, echo=True, connect_args=connect_args)

def create_db_and_tables():
    SQLModel.metadata.create_all(engine)

def get_session():
    with Session(engine) as session:
        yield session
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;async-version&#34;&gt;Async version:&lt;/h4&gt;
&lt;p&gt;Asyn version of the above defined functions which will be used in &lt;code&gt;main.py&lt;/code&gt;.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sqlmodel import SQLModel
from sqlalchemy.ext.asyncio import AsyncSession, create_async_engine
from sqlalchemy.orm import sessionmaker

sqlite_file_name = &amp;quot;database.db&amp;quot;
sqlite_url = f&amp;quot;sqlite+aiosqlite:///{sqlite_file_name}&amp;quot;
engine = create_async_engine(sqlite_url, echo=True, future=True)

async def init_db():
    async with engine.begin() as conn:
        await conn.run_sync(SQLModel.metadata.create_all)

async def get_session() -&amp;gt; AsyncSession:
    async_session = sessionmaker(
        engine, class_=AsyncSession, expire_on_commit=False
    )
    async with async_session() as session:
        yield session
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-4-define-api-endpoints-in-mainpy&#34;&gt;Step 4: Define API endpoints in &lt;code&gt;main.py&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Here we are going to define a POST endpoint using which we can write some task related information in the database. As of now, the request model for this endpoint is &lt;code&gt;TaskCreate&lt;/code&gt; and in the response this endpoint will return an object of type &lt;code&gt;Task&lt;/code&gt;.&lt;/p&gt;
&lt;h4 id=&#34;sync-version-1&#34;&gt;Sync version:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastapi import FastAPI, Depends
from sqlmodel import Session
from app.db import create_db_and_tables, get_session
from app.models import Task, TaskCreate

app = FastAPI()

@app.on_event(&amp;quot;startup&amp;quot;)
def on_startup():
    create_db_and_tables()

@app.get(&amp;quot;/ping&amp;quot;)
def pong():
    return {&amp;quot;ping&amp;quot;: &amp;quot;pong!&amp;quot;}

@app.post(&amp;quot;/task/&amp;quot;, response_model=Task)
def create_task(task: TaskCreate, session: Session = Depends(get_session)):
    db_task = Task.from_orm(task)
    session.add(db_task)
    session.commit()
    session.refresh(db_task)
    return db_task
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;async-version-1&#34;&gt;Async version:&lt;/h4&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from fastapi import FastAPI, Depends
from sqlmodel import Session
from app.db import create_db_and_tables, get_session
from app.models import Task, TaskCreate

app = FastAPI()

@app.on_event(&amp;quot;startup&amp;quot;)
def on_startup():
    create_db_and_tables()

@app.get(&amp;quot;/ping&amp;quot;)
def pong():
    return {&amp;quot;ping&amp;quot;: &amp;quot;pong!&amp;quot;}

@app.post(&amp;quot;/task/&amp;quot;, response_model=Task)
def create_task(task: TaskCreate, session: Session = Depends(get_session)):
    db_task = Task.from_orm(task)
    session.add(db_task)
    session.commit()
    session.refresh(db_task)
    return db_task
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-5-test-api-endpoints&#34;&gt;Step 5: Test API endpoints&lt;/h3&gt;
&lt;p&gt;Here we are going to test the API endpoints are working fine or not. If we get the expected result from the CURL and can validate the records are being updated in the DB we can expect that the APIs are working fine.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uvicorn app.main:app --reload
curl -X POST http://127.0.0.1:8000/task/ -H &#39;accept: application/json&#39; -H &#39;Content-Type: application/json&#39; -d &#39;{&amp;quot;task_name&amp;quot;: &amp;quot;just added task&amp;quot;}&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;Note:&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;a &lt;code&gt;database.db&lt;/code&gt; file will be create in project root directory.&lt;/li&gt;
&lt;li&gt;after making the post call validate the db records are being updated using &lt;code&gt;DB browser for SQLite&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;step-6-setup-alembic&#34;&gt;Step 6: Setup alembic&lt;/h3&gt;
&lt;h4 id=&#34;step-6a-generate-alembic-settings&#34;&gt;Step 6a: Generate alembic settings&lt;/h4&gt;
&lt;p&gt;In this step we are going generate all the settings for alembic migration. This will generate some files and folders in the project root directory.&lt;/p&gt;
&lt;h5 id=&#34;sync-version-2&#34;&gt;Sync version:&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alembic init alembic
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;async-version-2&#34;&gt;Async version:&lt;/h5&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alembic init -t async alembic
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;step-6b-update-alembic-settings&#34;&gt;Step 6b: Update alembic settings&lt;/h4&gt;
&lt;p&gt;After these files are generated, change the DB url in &lt;code&gt;alembic.ini&lt;/code&gt;.&lt;/p&gt;
&lt;h5 id=&#34;sync-version-3&#34;&gt;Sync version:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;replace &lt;code&gt;sqlalchemy.url = driver://user:pass@localhost/dbname&lt;/code&gt; in &lt;code&gt;alembic.ini&lt;/code&gt; with &lt;code&gt;sqlite:///database.db&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;async-version-3&#34;&gt;Async version:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;replace &lt;code&gt;sqlalchemy.url = driver://user:pass@localhost/dbname&lt;/code&gt; in &lt;code&gt;alembic.ini&lt;/code&gt; with &lt;code&gt;sqlite+aiosqlite:///database.db&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;common-changes-for-sync--async-version&#34;&gt;Common changes for Sync &amp;amp; Async version:&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;in &lt;code&gt;alembic/env.py&lt;/code&gt; file add &lt;code&gt;from sqlmodel import SQLModel&lt;/code&gt; in the import section.&lt;/li&gt;
&lt;li&gt;in &lt;code&gt;alembic/env.py&lt;/code&gt; file add the following line in import section, &lt;code&gt;from app.models import Task&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;in &lt;code&gt;alembic/env.py&lt;/code&gt; change &lt;code&gt;target_metadata = None&lt;/code&gt; to &lt;code&gt;target_metadata = SQLModel.metadata&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;in &lt;code&gt;alembic/script.py.mako&lt;/code&gt; add &lt;code&gt;import sqlmodel&lt;/code&gt; in the import section.&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;step-6c-generate-alembic-migration-settings&#34;&gt;Step 6c: Generate alembic migration settings&lt;/h4&gt;
&lt;p&gt;After making all the changes, make first migration.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alembic revision --autogenerate -m &amp;quot;init&amp;quot;
alembic upgrade head
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-7-update-data-models-in-modelspy&#34;&gt;Step 7: Update data models in &lt;code&gt;models.py&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;Now, lets say there is some changes we need to add to our data model. In this case we are just going to add &lt;code&gt;task_description&lt;/code&gt;. &lt;code&gt;task_description&lt;/code&gt; will be a optional string column in the &lt;code&gt;Task&lt;/code&gt; table. After we make the required changes in the &lt;code&gt;app/models.py&lt;/code&gt; and &lt;code&gt;app/main.py&lt;/code&gt;, we need to run the migration to add the newly added columns in the DB.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from sqlmodel import SQLModel, Field
from typing import Optional # This is a new add line

class TaskBase(SQLModel):
    task_name: str
    task_description: Optional[str] = None # This is a new add line

class Task(TaskBase, table=True):
    id: int = Field(default=None, primary_key=True)

class TaskCreate(TaskBase):
    pass
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-8-update-api-endpoints-in-mainpy&#34;&gt;Step 8: Update API endpoints in &lt;code&gt;main.py&lt;/code&gt;&lt;/h3&gt;
&lt;p&gt;In this case, endpoints remains unchanged but in a realistic scenario endpoints has to be changed to take the new information into account.&lt;/p&gt;
&lt;h3 id=&#34;step-9-run-db-migration&#34;&gt;Step 9: Run DB migration&lt;/h3&gt;
&lt;p&gt;Run the following line to update the database tables.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;alembic revision --autogenerate -m &amp;quot;add description&amp;quot;
alembic upgrade head
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;step-10-test-updated-api-endpoints&#34;&gt;Step 10: Test updated API endpoints&lt;/h3&gt;
&lt;p&gt;As last step, make a call to the API endpoints which will be using the updated table and check if everything is working fine or not.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;uvicorn app.main:app --reload
curl -X POST http://127.0.0.1:8000/task/ -H &#39;accept: application/json&#39; -H &#39;Content-Type: application/json&#39; -d &#39;{&amp;quot;task_name&amp;quot;: &amp;quot;just added task&amp;quot;,&amp;quot;task_description&amp;quot;:&amp;quot;a newly created task&amp;quot;}&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;ul&gt;
&lt;li&gt;after making the post call validate the db records are being updated using &lt;code&gt;DB browser for SQLite&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;conclusion&#34;&gt;Conclusion:&lt;/h3&gt;
&lt;p&gt;This workflow is quite good when in come to rapid prototyping. One can use this inside a docker container as well but make sure that the volume mounting is in place to keep the standalone database file and the other related alembic migration scripts.&lt;/p&gt;
&lt;h3 id=&#34;reference&#34;&gt;Reference:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://testdriven.io/blog/fastapi-sqlmodel/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FastAPI with Async SQLAlchemy, SQLModel, and Alembic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fastapi.tiangolo.com/advanced/async-sql-databases/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Async SQL (Relational) Databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/testdrivenio/fastapi-sqlmodel-alembic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;FastAPI + SQLModel + Alembic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://fastapi.tiangolo.com/tutorial/sql-databases/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;SQL (Relational) Databases&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://python.plainenglish.io/building-a-phone-directory-with-mysql-fastapi-and-angular-cd48673904f4&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Building a Phone Directory with Python, MySQL, FastAPI, and Angular&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://alembic.sqlalchemy.org/en/latest/autogenerate.html&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Alembic: Auto Generating Migrations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://towardsdatascience.com/build-an-async-python-service-with-fastapi-sqlalchemy-196d8792fa08&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Build an async python service with FastAPI &amp;amp; SQLAlchemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://hackernoon.com/how-to-set-up-fastapi-ormar-and-alembic&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;How to set up FastAPI, Ormar, and Alembic&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/tiangolo/uvicorn-gunicorn-fastapi-docker&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;tiangolo/uvicorn-gunicorn-fastapi-docker&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Welcome to Wowchemy, the website builder for Hugo</title>
      <link>https://academic-demo.netlify.app/post/getting-started/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/getting-started/</guid>
      <description>&lt;h2 id=&#34;overview&#34;&gt;Overview&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;The Wowchemy website builder for Hugo, along with its starter templates, is designed for professional creators, educators, and teams/organizations - although it can be used to create any kind of site&lt;/li&gt;
&lt;li&gt;The template can be modified and customised to suit your needs. It&amp;rsquo;s a good platform for anyone looking to take control of their data and online identity whilst having the convenience to start off with a &lt;strong&gt;no-code solution (write in Markdown and customize with YAML parameters)&lt;/strong&gt; and having &lt;strong&gt;flexibility to later add even deeper personalization with HTML and CSS&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;You can work with all your favourite tools and apps with hundreds of plugins and integrations to speed up your workflows, interact with your readers, and much more&lt;/li&gt;
&lt;/ol&gt;














&lt;figure  id=&#34;figure-the-template-is-mobile-first-with-a-responsive-design-to-ensure-that-your-site-looks-stunning-on-every-device&#34;&gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;https://raw.githubusercontent.com/wowchemy/wowchemy-hugo-modules/master/academic.png&#34; alt=&#34;The template is mobile first with a responsive design to ensure that your site looks stunning on every device.&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;figcaption&gt;
      The template is mobile first with a responsive design to ensure that your site looks stunning on every device.
    &lt;/figcaption&gt;&lt;/figure&gt;
&lt;h2 id=&#34;get-started&#34;&gt;Get Started&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;👉 &lt;a href=&#34;https://wowchemy.com/templates/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Create a new site&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;📚 &lt;a href=&#34;https://wowchemy.com/docs/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Personalize your site&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;💬 &lt;a href=&#34;https://discord.gg/z8wNYzb&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Chat with the &lt;strong&gt;Wowchemy community&lt;/strong&gt;&lt;/a&gt; or &lt;a href=&#34;https://discourse.gohugo.io&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Hugo community&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;🐦 Twitter: &lt;a href=&#34;https://twitter.com/wowchemy&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@wowchemy&lt;/a&gt; &lt;a href=&#34;https://twitter.com/GeorgeCushen&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;@GeorgeCushen&lt;/a&gt; &lt;a href=&#34;https://twitter.com/search?q=%28%23MadeWithWowchemy%20OR%20%23MadeWithAcademic%29&amp;amp;src=typed_query&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;#MadeWithWowchemy&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;💡 &lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/issues&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Request a &lt;strong&gt;feature&lt;/strong&gt; or report a &lt;strong&gt;bug&lt;/strong&gt; for &lt;em&gt;Wowchemy&lt;/em&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;⬆️ &lt;strong&gt;Updating Wowchemy?&lt;/strong&gt; View the &lt;a href=&#34;https://wowchemy.com/docs/guide/update/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Update Guide&lt;/a&gt; and &lt;a href=&#34;https://wowchemy.com/updates/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Release Notes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;crowd-funded-open-source-software&#34;&gt;Crowd-funded open-source software&lt;/h2&gt;
&lt;p&gt;To help us develop this template and software sustainably under the MIT license, we ask all individuals and businesses that use it to help support its ongoing maintenance and development via sponsorship.&lt;/p&gt;
&lt;h3 id=&#34;-click-here-to-become-a-sponsor-and-help-support-wowchemys-future-httpswowchemycomplans&#34;&gt;&lt;a href=&#34;https://wowchemy.com/plans/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;❤️ Click here to become a sponsor and help support Wowchemy&amp;rsquo;s future ❤️&lt;/a&gt;&lt;/h3&gt;
&lt;p&gt;As a token of appreciation for sponsoring, you can &lt;strong&gt;unlock &lt;a href=&#34;https://wowchemy.com/plans/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;these&lt;/a&gt; awesome rewards and extra features 🦄✨&lt;/strong&gt;&lt;/p&gt;
&lt;h2 id=&#34;ecosystem&#34;&gt;Ecosystem&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;&lt;a href=&#34;https://github.com/wowchemy/hugo-academic-cli&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Hugo Academic CLI&lt;/a&gt;:&lt;/strong&gt; Automatically import publications from BibTeX&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;inspiration&#34;&gt;Inspiration&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://academic-demo.netlify.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Check out the latest &lt;strong&gt;demo&lt;/strong&gt;&lt;/a&gt; of what you&amp;rsquo;ll get in less than 10 minutes, or &lt;a href=&#34;https://wowchemy.com/user-stories/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;view the &lt;strong&gt;showcase&lt;/strong&gt;&lt;/a&gt; of personal, project, and business sites.&lt;/p&gt;
&lt;h2 id=&#34;features&#34;&gt;Features&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Page builder&lt;/strong&gt; - Create &lt;em&gt;anything&lt;/em&gt; with &lt;a href=&#34;https://wowchemy.com/docs/page-builder/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;widgets&lt;/strong&gt;&lt;/a&gt; and &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;elements&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Edit any type of content&lt;/strong&gt; - Blog posts, publications, talks, slides, projects, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Create content&lt;/strong&gt; in &lt;a href=&#34;https://wowchemy.com/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Markdown&lt;/strong&gt;&lt;/a&gt;, &lt;a href=&#34;https://wowchemy.com/docs/import/jupyter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;Jupyter&lt;/strong&gt;&lt;/a&gt;, or &lt;a href=&#34;https://wowchemy.com/docs/install-locally/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;RStudio&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Plugin System&lt;/strong&gt; - Fully customizable &lt;a href=&#34;https://wowchemy.com/docs/customization/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;&lt;strong&gt;color&lt;/strong&gt; and &lt;strong&gt;font themes&lt;/strong&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Display Code and Math&lt;/strong&gt; - Code highlighting and &lt;a href=&#34;https://en.wikibooks.org/wiki/LaTeX/Mathematics&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;LaTeX math&lt;/a&gt; supported&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Integrations&lt;/strong&gt; - &lt;a href=&#34;https://analytics.google.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Google Analytics&lt;/a&gt;, &lt;a href=&#34;https://disqus.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Disqus commenting&lt;/a&gt;, Maps, Contact Forms, and more!&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Beautiful Site&lt;/strong&gt; - Simple and refreshing one page design&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Industry-Leading SEO&lt;/strong&gt; - Help get your website found on search engines and social media&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Media Galleries&lt;/strong&gt; - Display your images and videos with captions in a customizable gallery&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Mobile Friendly&lt;/strong&gt; - Look amazing on every screen with a mobile friendly version of your site&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-language&lt;/strong&gt; - 34+ language packs including English, 中文, and Português&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Multi-user&lt;/strong&gt; - Each author gets their own profile page&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Privacy Pack&lt;/strong&gt; - Assists with GDPR&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Stand Out&lt;/strong&gt; - Bring your site to life with animation, parallax backgrounds, and scroll effects&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;One-Click Deployment&lt;/strong&gt; - No servers. No databases. Only files.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;themes&#34;&gt;Themes&lt;/h2&gt;
&lt;p&gt;Wowchemy and its templates come with &lt;strong&gt;automatic day (light) and night (dark) mode&lt;/strong&gt; built-in. Alternatively, visitors can choose their preferred mode - click the moon icon in the top right of the &lt;a href=&#34;https://academic-demo.netlify.com/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Demo&lt;/a&gt; to see it in action! Day/night mode can also be disabled by the site admin in &lt;code&gt;params.toml&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://wowchemy.com/docs/customization&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Choose a stunning &lt;strong&gt;theme&lt;/strong&gt; and &lt;strong&gt;font&lt;/strong&gt;&lt;/a&gt; for your site. Themes are fully customizable.&lt;/p&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2016-present &lt;a href=&#34;https://georgecushen.com&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;George Cushen&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/blob/master/LICENSE.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hello R Markdown</title>
      <link>https://academic-demo.netlify.app/post/2020-12-01-r-rmarkdown/</link>
      <pubDate>Tue, 01 Dec 2020 21:13:14 -0500</pubDate>
      <guid>https://academic-demo.netlify.app/post/2020-12-01-r-rmarkdown/</guid>
      <description>
&lt;script src=&#34;https://academic-demo.netlify.app/post/2020-12-01-r-rmarkdown/index.en_files/header-attrs/header-attrs.js&#34;&gt;&lt;/script&gt;


&lt;div id=&#34;r-markdown&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;R Markdown&lt;/h1&gt;
&lt;p&gt;This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see &lt;a href=&#34;http://rmarkdown.rstudio.com&#34; class=&#34;uri&#34;&gt;http://rmarkdown.rstudio.com&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;You can embed an R code chunk like this:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;summary(cars)
##      speed           dist       
##  Min.   : 4.0   Min.   :  2.00  
##  1st Qu.:12.0   1st Qu.: 26.00  
##  Median :15.0   Median : 36.00  
##  Mean   :15.4   Mean   : 42.98  
##  3rd Qu.:19.0   3rd Qu.: 56.00  
##  Max.   :25.0   Max.   :120.00
fit &amp;lt;- lm(dist ~ speed, data = cars)
fit
## 
## Call:
## lm(formula = dist ~ speed, data = cars)
## 
## Coefficients:
## (Intercept)        speed  
##     -17.579        3.932&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;including-plots&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Including Plots&lt;/h1&gt;
&lt;p&gt;You can also embed plots. See Figure &lt;a href=&#34;#fig:pie&#34;&gt;1&lt;/a&gt; for example:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;par(mar = c(0, 1, 0, 1))
pie(
  c(280, 60, 20),
  c(&amp;#39;Sky&amp;#39;, &amp;#39;Sunny side of pyramid&amp;#39;, &amp;#39;Shady side of pyramid&amp;#39;),
  col = c(&amp;#39;#0292D8&amp;#39;, &amp;#39;#F7EA39&amp;#39;, &amp;#39;#C4B632&amp;#39;),
  init.angle = -50, border = NA
)&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;figure&#34;&gt;&lt;span id=&#34;fig:pie&#34;&gt;&lt;/span&gt;
&lt;img src=&#34;https://academic-demo.netlify.app/post/2020-12-01-r-rmarkdown/index.en_files/figure-html/pie-1.png&#34; alt=&#34;A fancy pie chart.&#34; width=&#34;672&#34; /&gt;
&lt;p class=&#34;caption&#34;&gt;
Figure 1: A fancy pie chart.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Writing technical content in Academic</title>
      <link>https://academic-demo.netlify.app/post/writing-technical-content/</link>
      <pubDate>Fri, 12 Jul 2019 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/writing-technical-content/</guid>
      <description>&lt;p&gt;Academic is designed to give technical content creators a seamless experience. You can focus on the content and Academic handles the rest.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Highlight your code snippets, take notes on math classes, and draw diagrams from textual representation.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;On this page, you&amp;rsquo;ll find some examples of the types of technical content that can be rendered with Academic.&lt;/p&gt;
&lt;h2 id=&#34;examples&#34;&gt;Examples&lt;/h2&gt;
&lt;h3 id=&#34;code&#34;&gt;Code&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for highlighting code syntax. You can enable this feature by toggling the &lt;code&gt;highlight&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```python
import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import pandas as pd
data = pd.read_csv(&amp;quot;data.csv&amp;quot;)
data.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;charts&#34;&gt;Charts&lt;/h3&gt;
&lt;p&gt;Academic supports the popular &lt;a href=&#34;https://plot.ly/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Plotly&lt;/a&gt; chart format.&lt;/p&gt;
&lt;p&gt;Save your Plotly JSON in your page folder, for example &lt;code&gt;chart.json&lt;/code&gt;, and then add the &lt;code&gt;{{&amp;lt; chart data=&amp;quot;chart&amp;quot; &amp;gt;}}&lt;/code&gt; shortcode where you would like the chart to appear.&lt;/p&gt;
&lt;p&gt;Demo:&lt;/p&gt;


&lt;div id=&#34;chart-418637295&#34; class=&#34;chart&#34;&gt;&lt;/div&gt;
&lt;script&gt;
  (function() {
    let a = setInterval( function() {
      if ( typeof window.Plotly === &#39;undefined&#39; ) {
        return;
      }
      clearInterval( a );

      Plotly.d3.json(&#34;./line-chart.json&#34;, function(chart) {
        Plotly.plot(&#39;chart-418637295&#39;, chart.data, chart.layout, {responsive: true});
      });
    }, 500 );
  })();
&lt;/script&gt;
&lt;p&gt;You might also find the &lt;a href=&#34;http://plotly-json-editor.getforge.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Plotly JSON Editor&lt;/a&gt; useful.&lt;/p&gt;
&lt;h3 id=&#34;math&#34;&gt;Math&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for $\LaTeX$ math. You can enable this feature by toggling the &lt;code&gt;math&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;To render &lt;em&gt;inline&lt;/em&gt; or &lt;em&gt;block&lt;/em&gt; math, wrap your LaTeX math with &lt;code&gt;$...$&lt;/code&gt; or &lt;code&gt;$$...$$&lt;/code&gt;, respectively.&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;math block&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;$$\gamma_{n} = \frac{ 
\left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T 
\left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}
{\left \|\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right \|^2}$$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;$$\gamma_{n} = \frac{ \left | \left (\mathbf x_{n} - \mathbf x_{n-1} \right )^T \left [\nabla F (\mathbf x_{n}) - \nabla F (\mathbf x_{n-1}) \right ] \right |}{\left |\nabla F(\mathbf{x}_{n}) - \nabla F(\mathbf{x}_{n-1}) \right |^2}$$&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;inline math&lt;/strong&gt; &lt;code&gt;$\nabla F(\mathbf{x}_{n})$&lt;/code&gt; renders as $\nabla F(\mathbf{x}_{n})$.&lt;/p&gt;
&lt;p&gt;Example &lt;strong&gt;multi-line math&lt;/strong&gt; using the &lt;code&gt;\\\\&lt;/code&gt; math linebreak:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-latex&#34;&gt;$$f(k;p_{0}^{*}) = \begin{cases}p_{0}^{*} &amp;amp; \text{if }k=1, \\\\
1-p_{0}^{*} &amp;amp; \text{if }k=0.\end{cases}$$
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;$$f(k;p_{0}^{*}) = \begin{cases}p_{0}^{*} &amp;amp; \text{if }k=1, \\&lt;br&gt;
1-p_{0}^{*} &amp;amp; \text{if }k=0.\end{cases}$$&lt;/p&gt;
&lt;h3 id=&#34;diagrams&#34;&gt;Diagrams&lt;/h3&gt;
&lt;p&gt;Academic supports a Markdown extension for diagrams. You can enable this feature by toggling the &lt;code&gt;diagram&lt;/code&gt; option in your &lt;code&gt;config/_default/params.toml&lt;/code&gt; file or by adding &lt;code&gt;diagram: true&lt;/code&gt; to your page front matter.&lt;/p&gt;
&lt;p&gt;An example &lt;strong&gt;flowchart&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;graph TD
A[Hard] --&amp;gt;|Text| B(Round)
B --&amp;gt; C{Decision}
C --&amp;gt;|One| D[Result 1]
C --&amp;gt;|Two| E[Result 2]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;sequence diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;sequenceDiagram
Alice-&amp;gt;&amp;gt;John: Hello John, how are you?
loop Healthcheck
    John-&amp;gt;&amp;gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&amp;gt;&amp;gt;Alice: Great!
John-&amp;gt;&amp;gt;Bob: How about you?
Bob--&amp;gt;&amp;gt;John: Jolly good!
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;Gantt diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;gantt
section Section
Completed :done,    des1, 2014-01-06,2014-01-08
Active        :active,  des2, 2014-01-07, 3d
Parallel 1   :         des3, after des1, 1d
Parallel 2   :         des4, after des1, 1d
Parallel 3   :         des5, after des3, 1d
Parallel 4   :         des6, after des4, 1d
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;class diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
  &amp;lt;&amp;lt;service&amp;gt;&amp;gt;
  int id
  size()
}
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;classDiagram
Class01 &amp;lt;|-- AveryLongClass : Cool
&amp;lt;&amp;lt;interface&amp;gt;&amp;gt; Class01
Class09 --&amp;gt; C2 : Where am i?
Class09 --* C3
Class09 --|&amp;gt; Class07
Class07 : equals()
Class07 : Object[] elementData
Class01 : size()
Class01 : int chimp
Class01 : int gorilla
class Class10 {
  &amp;lt;&amp;lt;service&amp;gt;&amp;gt;
  int id
  size()
}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;An example &lt;strong&gt;state diagram&lt;/strong&gt;:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;```mermaid
stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
```
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-mermaid&#34;&gt;stateDiagram
[*] --&amp;gt; Still
Still --&amp;gt; [*]
Still --&amp;gt; Moving
Moving --&amp;gt; Still
Moving --&amp;gt; Crash
Crash --&amp;gt; [*]
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;todo-lists&#34;&gt;Todo lists&lt;/h3&gt;
&lt;p&gt;You can even write your todo lists in Academic too:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;- [x] Write math example
- [x] Write diagram example
- [ ] Do something else
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Write math example&lt;/li&gt;
&lt;li&gt;&lt;input checked=&#34;&#34; disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Write diagram example&lt;/li&gt;
&lt;li&gt;&lt;input disabled=&#34;&#34; type=&#34;checkbox&#34;&gt; Do something else&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;tables&#34;&gt;Tables&lt;/h3&gt;
&lt;p&gt;Represent your data in tables:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;| First Header  | Second Header |
| ------------- | ------------- |
| Content Cell  | Content Cell  |
| Content Cell  | Content Cell  |
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;First Header&lt;/th&gt;
&lt;th&gt;Second Header&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;td&gt;Content Cell&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;callouts&#34;&gt;Callouts&lt;/h3&gt;
&lt;p&gt;Academic supports a &lt;a href=&#34;https://wowchemy.com/docs/content/writing-markdown-latex/#callouts&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;shortcode for callouts&lt;/a&gt;, also referred to as &lt;em&gt;asides&lt;/em&gt;, &lt;em&gt;hints&lt;/em&gt;, or &lt;em&gt;alerts&lt;/em&gt;. By wrapping a paragraph in &lt;code&gt;{{% callout note %}} ... {{% /callout %}}&lt;/code&gt;, it will render as an aside.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{% callout note %}}
A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
{{% /callout %}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;div class=&#34;alert alert-note&#34;&gt;
  &lt;div&gt;
    A Markdown aside is useful for displaying notices, hints, or definitions to your readers.
  &lt;/div&gt;
&lt;/div&gt;
&lt;h3 id=&#34;spoilers&#34;&gt;Spoilers&lt;/h3&gt;
&lt;p&gt;Add a spoiler to a page to reveal text, such as an answer to a question, after a button is clicked.&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; spoiler text=&amp;quot;Click to view the spoiler&amp;quot; &amp;gt;}}
You found me!
{{&amp;lt; /spoiler &amp;gt;}}
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;details class=&#34;spoiler &#34;  id=&#34;spoiler-2&#34;&gt;
  &lt;summary&gt;Click to view the spoiler&lt;/summary&gt;
  &lt;p&gt;You found me!&lt;/p&gt;
&lt;/details&gt;
&lt;h3 id=&#34;icons&#34;&gt;Icons&lt;/h3&gt;
&lt;p&gt;Academic enables you to use a wide range of &lt;a href=&#34;https://sourcethemes.com/academic/docs/page-builder/#icons&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;icons from &lt;em&gt;Font Awesome&lt;/em&gt; and &lt;em&gt;Academicons&lt;/em&gt;&lt;/a&gt; in addition to &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/#emojis&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;emojis&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Here are some examples using the &lt;code&gt;icon&lt;/code&gt; shortcode to render icons:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-markdown&#34;&gt;{{&amp;lt; icon name=&amp;quot;terminal&amp;quot; pack=&amp;quot;fas&amp;quot; &amp;gt;}} Terminal  
{{&amp;lt; icon name=&amp;quot;python&amp;quot; pack=&amp;quot;fab&amp;quot; &amp;gt;}} Python  
{{&amp;lt; icon name=&amp;quot;r-project&amp;quot; pack=&amp;quot;fab&amp;quot; &amp;gt;}} R
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;renders as&lt;/p&gt;
&lt;p&gt;
  &lt;i class=&#34;fas fa-terminal  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Terminal&lt;br&gt;

  &lt;i class=&#34;fab fa-python  pr-1 fa-fw&#34;&gt;&lt;/i&gt; Python&lt;br&gt;

  &lt;i class=&#34;fab fa-r-project  pr-1 fa-fw&#34;&gt;&lt;/i&gt; R&lt;/p&gt;
&lt;h3 id=&#34;did-you-find-this-page-helpful-consider-sharing-it-&#34;&gt;Did you find this page helpful? Consider sharing it 🙌&lt;/h3&gt;
</description>
    </item>
    
    <item>
      <title>Display Jupyter Notebooks with Academic</title>
      <link>https://academic-demo.netlify.app/post/jupyter/</link>
      <pubDate>Tue, 05 Feb 2019 00:00:00 +0000</pubDate>
      <guid>https://academic-demo.netlify.app/post/jupyter/</guid>
      <description>&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from IPython.core.display import Image
Image(&#39;https://www.python.org/static/community_logos/python-logo-master-v3-TM-flattened.png&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;















&lt;figure  &gt;
  &lt;div class=&#34;d-flex justify-content-center&#34;&gt;
    &lt;div class=&#34;w-100&#34; &gt;&lt;img src=&#34;./index_1_0.png&#34; alt=&#34;png&#34; loading=&#34;lazy&#34; data-zoomable /&gt;&lt;/div&gt;
  &lt;/div&gt;&lt;/figure&gt;
&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;print(&amp;quot;Welcome to Academic!&amp;quot;)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code&gt;Welcome to Academic!
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;install-python-and-jupyterlab&#34;&gt;Install Python and JupyterLab&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;https://www.anaconda.com/distribution/#download-section&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Install Anaconda&lt;/a&gt; which includes Python 3 and JupyterLab.&lt;/p&gt;
&lt;p&gt;Alternatively, install JupyterLab with &lt;code&gt;pip3 install jupyterlab&lt;/code&gt;.&lt;/p&gt;
&lt;h2 id=&#34;create-or-upload-a-jupyter-notebook&#34;&gt;Create or upload a Jupyter notebook&lt;/h2&gt;
&lt;p&gt;Run the following commands in your Terminal, substituting &lt;code&gt;&amp;lt;MY-WEBSITE-FOLDER&amp;gt;&lt;/code&gt; and &lt;code&gt;&amp;lt;SHORT-POST-TITLE&amp;gt;&lt;/code&gt; with the file path to your Academic website folder and a short title for your blog post (use hyphens instead of spaces), respectively:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;mkdir -p &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
cd &amp;lt;MY-WEBSITE-FOLDER&amp;gt;/content/post/&amp;lt;SHORT-POST-TITLE&amp;gt;/
jupyter lab index.ipynb
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;The &lt;code&gt;jupyter&lt;/code&gt; command above will launch the JupyterLab editor, allowing us to add Academic metadata and write the content.&lt;/p&gt;
&lt;h2 id=&#34;edit-your-post-metadata&#34;&gt;Edit your post metadata&lt;/h2&gt;
&lt;p&gt;The first cell of your Jupter notebook will contain your post metadata (&lt;a href=&#34;https://sourcethemes.com/academic/docs/front-matter/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;front matter&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;In Jupter, choose &lt;em&gt;Markdown&lt;/em&gt; as the type of the first cell and wrap your Academic metadata in three dashes, indicating that it is YAML front matter:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;---
title: My post&#39;s title
date: 2019-09-01

# Put any other Academic metadata here...
---
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Edit the metadata of your post, using the &lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;documentation&lt;/a&gt; as a guide to the available options.&lt;/p&gt;
&lt;p&gt;To set a &lt;a href=&#34;https://sourcethemes.com/academic/docs/managing-content/#featured-image&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;featured image&lt;/a&gt;, place an image named &lt;code&gt;featured&lt;/code&gt; into your post&amp;rsquo;s folder.&lt;/p&gt;
&lt;p&gt;For other tips, such as using math, see the guide on &lt;a href=&#34;https://sourcethemes.com/academic/docs/writing-markdown-latex/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;writing content with Academic&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&#34;convert-notebook-to-markdown&#34;&gt;Convert notebook to Markdown&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;jupyter nbconvert index.ipynb --to markdown --NbConvertApp.output_files_dir=.
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;example&#34;&gt;Example&lt;/h2&gt;
&lt;p&gt;This post was created with Jupyter. The orginal files can be found at &lt;a href=&#34;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;https://github.com/gcushen/hugo-academic/tree/master/exampleSite/content/post/jupyter&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
